name: Docker

on:
  schedule:
    - cron: '34 3 * * *'
  workflow_dispatch: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Sonarr version from remote filename
        id: extract_version
        run: |
          set -e
          # Download only the headers to get the filename from Content-Disposition
          FILENAME=$(curl -sL -D - "https://services.sonarr.tv/v1/download/main/latest?version=4&os=linux&arch=x64" \
            -o /dev/null | grep -i "content-disposition" | awk -F'filename=' '{print $2}' | tr -d '";' | sed 's/^ //g')
          # Extract the version like 4.0.15.2941 from the filename
          VERSION=$(echo "$FILENAME" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          echo "SONARR_VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if image tag already exists in GHCR
        id: check_tag_exists
        # This step should only run if we successfully extracted a version
        if: ${{ steps.extract_version.outputs.version }}
        run: |
          IMAGE_NAME="spoland/sonarr-docker"
          VERSION_TAG="${{ steps.extract_version.outputs.version }}"

          echo "Checking for existing image: ${IMAGE_NAME}:${VERSION_TAG}"
          PACKAGE_VERSIONS=$(gh api /users/spoland/packages/container/sonarr-docker/versions | jq -r '.[].metadata.container.tags[]')

          if echo "$PACKAGE_VERSIONS" | grep -q "^${VERSION_TAG}$"; then
            echo "Image ${IMAGE_NAME}:${VERSION_TAG} already exists in GitHub Container Registry."
            echo "Skipping pipeline run."
            gh run cancel ${{ github.run_id }} # Abort the workflow
          else
            echo "Image ${IMAGE_NAME}:${VERSION_TAG} does not exist. Proceeding with build."
          fi
        env:
          # This ensures gh CLI is authenticated to check packages
          GH_TOKEN: ${{ github.token }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.extract_version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      # Sign the published Docker image. Use an ID to track the outcome.
      - name: Sign the published Docker image
        id: sign # <-- Add an ID to this step
        if: ${{ github.event_name != 'pull_request' }}
        # This will allow the workflow to continue even if this step fails.
        continue-on-error: true # <-- The key change
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "Attempting to sign image digest..."
          # This is the original command, you could add your retry logic here too
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # Check if signing failed and print a warning.
      - name: Print signing failure warning
        # This step only runs if the previous step with id 'sign' had an outcome of 'failure'.
        if: ${{ steps.sign.outcome == 'failure' }}
        run: |
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!! WARNING: Image signing failed due to an external service error (Cosign/Sigstore)."
          echo "!!! The Docker image was successfully pushed but is UNSIGNED."
          echo "!!! This may be due to a temporary outage. Check https://status.sigstore.dev"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
